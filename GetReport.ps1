function find-Tuesday($dt){
	$tmpDate = Get-Date -Month $dt.Month -Day 1 -y $dt.Year
	$i = 0
	$retDay = 0
	for($k=0;$k -lt 20;$k++){
		$xDay = $tmpDate.AddDays($k)
		if ($xDay.DayOfWeek.Value__ -eq 2){
			if ($i -eq 1){
				$retDay =  $xDay.Day
				break
			}
			else
			{
				$i++
			}
		}
	}
	
	return $retDay
}

start-transcript MonthlyKB.log
$periods = 'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'

$dt=Get-Date 
$dt=Get-Date -Month 4 -Day 20 -y 2022
$Tuesd = Find-Tuesday $dt
Write-Host "Current Date: $dt"
Write-Host "Current Month: $($dt.Month)"
write-Host "Second Tuesday : $Tuesd"
#read-host
if ($dt.Day -lt $Tuesd){
	if ($dt.Month -eq 1){
		$monthOfInterest = $dt.AddYears(-1).Year.ToString()+"-Dec"
	}
	else
	{
		$monthOfInterest = $dt.Year.ToString()+"-"+$periods[$dt.Month-2]
	}
	
}
else
{
	$monthOfInterest = $dt.Year.ToString()+"-"+$periods[$dt.Month-1]	
	
}
write-Host "Period : $monthOfInterest "
#Get-MsrcCvrfDocument -ID $monthOfInterest -Verbose | Get-MsrcSecurityBulletinHtml -Verbose | Out-File .\MSRCAprilSecurityUpdates.html
#read-host
try{
	$document = Get-MsrcCvrfDocument -ID $monthOfInterest -Verbose
	
	$i = 0
	$outarr = @()
	$wServ = "Windows Server 201"
	$products = @()
	$CVEReport = @()
	foreach($doc in $document){
		foreach( $Itm in $doc.ProductTree.FullProductName){
			if ($Itm.Value.Contains($wServ)){
				if ($Itm.Value.Substring(0,18) -eq "Windows Server 201"){
					$prodItem = "" | Select  ID, Title
					$prodItem.ID = $Itm.ProductID
					$prodItem.Title = $Itm.Value
					$products += $prodItem
				}
			}
		
			#$outarr += $doc
			#$i++
		}
		foreach($xItm in $doc.Vulnerability){
			$currentCVETitle = $xItm.Title.Value
			$currentCVE = $xItm.CVE
			$CVEFound = $false
			foreach($vItm in $xItm.ProductStatuses){
				
				foreach($pItm in $vItm.ProductID){
					foreach($wProd in $products){
						if ($wProd.ID -eq $pItm){
						 #write-Host "$($wProd.Title) : $currentCVE"
						 $CVEFound = $true
						 break
						}
					}
					if($CVEFound){
						break
					} 				
				}
				if($CVEFound){
					break
				}
			}
			if($CVEFound){
				write-Host
				write-Host "$currentCVE " -f Cyan
				write-Host "$currentCVETitle " -f Cyan
				foreach($rItm in $xItm.Remediations){
					if ($rItm.Type -eq 5){
						$kbFound = $false
						foreach($fItm in $rItm.ProductID){
							foreach($wProd in $products){
								if ($wProd.ID -eq $fItm){
									write-Host "`t$($wProd.Title)" -f Green
									
									$kbFound = $true
								} 
							}
						}
						if ($kbFound){
							$CVEItem = "" | Select CVE,CVETitle,CVELevel,Product,ProductURL
							$CVEItem.CVE = $currentCVE
							$CVEItem.CVETitle = $currentCVETitle
							$CVEItem.Product = $wProd.Title
							$CVEItem.ProductURL = $rItm.URL
							write-Host $("`t$($rItm.URL)") -f Yellow
							write-Host
							
						}
					}
				}
				foreach($tItm in $xItm.Threats){
					$threadFound = $false
					if ($tItm.Type -eq 3){
						foreach($wProd in $products){
							if ($wProd.ID -eq $tItm.ProductID){
								write-Host "`t$($tItm.Description.Value)" -f Magenta
								$CVEItem.CVELevel = $tItm.Description.Value	
								$threadFound = $true
								break
							}								
						}
						if ($threadFound){
							$CVEReport += $CVEItem
							break;
						}						
						
					}
				}	
				
			}
		}
	}
	$outfile = ".\"+ $monthOfInterest+".json"
	$outCSV = ".\"+ $monthOfInterest+".csv"
	
	$CVEReport | Export-CSV -Path $outCSV -encoding default -NoTypeInformation -Delimiter `t
	#$menuDumpDst = get-content $outfile -encoding default | ConvertFrom-Json
	#$document | ConvertTo-Json -Depth 100 | out-file $outfile -Encoding Default
		
	#$document | Get-MsrcSecurityBulletinHtml -Verbose | Out-File .\MSRC-May-SecurityUpdates.html
	#$outarr | Get-MsrcSecurityBulletinHtml -Verbose | Out-File .\MSRC-2022-May-SecurityUpdates.html
	#Write-Host "Count: $i"
	#$products
}
catch {
  Write-Host "An error occurred:"
  $errX = $_.Exception.Message 
  if ($errX.Contains("does not belong to the set")){
	  Write-Host -f Yellow "Wrong Period : $monthOfInterest"
  }
  write-Host
  Write-Host $_.Exception.Message -f Red
  
}
stop-transcript